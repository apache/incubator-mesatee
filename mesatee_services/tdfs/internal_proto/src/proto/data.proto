syntax = "proto2";
import "kms.proto";
import "data_common.proto";
package tdfs_proto;

// Request for writing a private output
// Update the meta information for the output
message WritePrivateOutputRequest {
  // data identifier
  required string data_id = 1;
  // meta information of the data
  required data_common.DataMeta meta = 2;
}

// Response for writing a private output
message WritePrivateOutputResponse {
  required bool success = 1;
}

// Request for fetching a private input
message FetchPrivateInputRequest {
  // data indentifier
  required string data_id = 1;
}

// Response for fetching a private input
// TMS can use the request to prepare inputs
message FetchPrivateInputResponse {
  // meta information of the input, for checking integrity
  required data_common.DataMeta meta = 1; 
  // storage information for reading the data
  required data_common.DataStorageInfo storage_info = 2;
  // key config for file decryption
  required kms_proto.KeyConfig config = 3; 
}

// Request for fetching a private output
message FetchPrivateOutputRequest {
  // data indentifier
  required string data_id = 1;
}

// Response for fetching a private output
// TMS can use the request to prepare outputs
message FetchPrivateOutputResponse {
  // storage information for writing the data
  required data_common.DataStorageInfo storage_info = 1; 
  // key config for file encryption
  required kms_proto.KeyConfig config = 2;
  // whether the output is already written by a task
  required bool is_complete = 3; 
}


// Request for registering fusion output
message RegisterFusionOutputRequest {
  // owners of fused data 
  repeated string owners = 1; 
  // source task id
  required string task_id = 2;
}

// Response for registing fusion output
// The response includes the storage_info and key_config, 
// so the worker can read/write the data.
// Data id should be returned to the task participants.
message RegisterFusionOutputResponse {
  required string data_id = 1; 
  // internal storage info for writing output
  required data_common.DataStorageInfo storage_info = 2; 
  // key config for file encryption
  required kms_proto.KeyConfig config = 3; 
}

// Request for feching a fusion data as an input
message FetchFusionDataRequest {
  // Data identifier
  required string data_id = 1;
}

// Response for fetching a fusion data as an input
message FetchFusionDataResponse {
  // Meta information. If output is not written, the meta infomation is None. 
  optional data_common.DataMeta meta = 1;
  // key config for file decryption
  required kms_proto.KeyConfig config = 2; 
  // Owners of the data
  repeated string owners = 3;
  // Which task generates the fustion data
  required string source_task_id = 4;
  // Whether the output has been written by a task. 
  required bool is_complete = 5;
}

service DataStoreService {
  rpc WritePrivateOutput(WritePrivateOutputRequest) returns (WritePrivateOutputResponse);
  rpc FetchPrivateInput(FetchPrivateInputRequest) returns (FetchPrivateInputResponse);
  rpc FetchPrivateOutput(FetchPrivateOutputRequest) returns (FetchPrivateOutputResponse);
}

service FusionDataService {
  rpc RegisterFusionOutput(RegisterFusionOutputRequest) returns (RegisterFusionOutputResponse);
  rpc FetchFusionData(FetchFusionDataRequest) returns (FetchFusionDataResponse);
}