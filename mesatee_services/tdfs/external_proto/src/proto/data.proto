syntax = "proto2";
import "kms.proto";
import "cred.proto";
import "data_common.proto";
package data_proto;


// Request for registering an input
// The input contains: the logical access info (key config), physical access info (storage path)
// and meta information to check the integrity before and after encryption
message RegisterInputRequest {
  // Key config for file decryption
  required kms_proto.KeyConfig config = 1;
  // Meta information
  required data_common.DataMeta meta = 2;
  // Storage information: where to access the input
  required data_common.DataStorageInfo storage_info = 3; 
  // Used for authentication
  required cred_proto.Credential creds = 99;
}

// Response for registering an input
message RegisterInputResponse {
  // data identifier
  required string data_id = 1;
}

// Request for registering a private output
message RegisterOutputRequest {
  // Encryption type: AEAD, ProtectedFS
  required kms_proto.EncType enc_type = 1;
  // storage information
  required data_common.DataStorageInfo storage_info = 2; 
  // Used for authentication
  required cred_proto.Credential creds = 99;
}

// Request for registering a private output
message RegisterOutputResponse {
  // data identifier
  required string data_id = 1;
}

// Request for reading the private output
message ReadOutputRequest {
  // Data identifier
  required string data_id = 1;
  required cred_proto.Credential creds = 99;
}

// Response for reading the output.
message ReadOutputResponse {
  // Meta information. If output is not written, the meta infomation is None. 
  optional data_common.DataMeta meta = 1; 
  // Key config for file decryption. If output is not written, the key config won't be returned. 
  optional kms_proto.KeyConfig config = 2;
}

// Request for deleting a data
message DeleteDataRequest {
  required string data_id = 1;
  required cred_proto.Credential creds = 99;
}

// Response for deleting a data
message DeleteDataResponse {
  required bool success = 1;
}

// @need_authentication # automatic authentication
service TDFSExternal {
  rpc RegisterInput(RegisterInputRequest) returns (RegisterInputResponse);
  rpc RegisterOutput(RegisterOutputRequest) returns (RegisterOutputResponse);
  rpc ReadOutput(ReadOutputRequest) returns (ReadOutputResponse);
  rpc DeleteData(DeleteDataRequest) returns (DeleteDataResponse);
}