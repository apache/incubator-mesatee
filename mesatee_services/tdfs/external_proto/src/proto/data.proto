syntax = "proto2";
import "kms.proto";
import "cred.proto";
import "data_common.proto";
package tdfs_proto;


// Request for registering a private input
// The input includes: the logical access info (key config), physical access info (storage path)
// and meta information to check the integrity before and after encryption
message RegisterPrivateInputRequest {
  // Key config for file decryption
  required kms_proto.KeyConfig config = 1;
  // Meta information
  required data_common.DataMeta meta = 2;
  // Storage information: where to access the input
  required data_common.DataStorageInfo storage_info = 3; 
  // Used for authentication
  required cred_proto.Credential creds = 99;
}

// Response for registering a private input
message RegisterPrivateInputResponse {
  // data identifier
  required string data_id = 1;
}

// Request for registering a private output
message RegisterPrivateOutputRequest {
  // Key config for file encrytpion
  required kms_proto.KeyConfig config = 1;
  // storage information
  required data_common.DataStorageInfo storage_info = 2; 
  // Used for authentication
  required cred_proto.Credential creds = 99;
}

// Request for registering a private output
message RegisterPrivateOutputResponse {
  // data identifier
  required string data_id = 1;
}

// Request for reading the meta and status of a private output
message ReadPrivateOutputRequest {
  // Data identifier
  required string data_id = 1;
  // Used for authentication
  required cred_proto.Credential creds = 99;
}

// Response for reading the meta and status of a private output
message ReadPrivateOutputResponse {
  // Meta information. If output is not written, the meta infomation is None. 
  optional data_common.DataMeta meta = 1;
  // Whether the output has been written by a task. 
  required bool is_complete = 2;
}

// Request for deleting a private data
message DeletePrivateDataRequest {
  // Data identifier
  required string data_id = 1;
  // Used for authentication
  required cred_proto.Credential creds = 99;
}

// Response for deleting a private data
message DeletePrivateDataResponse {
  required bool success = 1;
}

// Request for reading the meta and status of a fusion data
message ReadFusionDataRequest {
  // Data identifier
  required string data_id = 1;
  // Used for authentication
  required cred_proto.Credential creds = 99;
}

// Response for reading the meta and status of a fusion data
message ReadFusionDataResponse {
  // Meta information. If output is not written, the meta infomation is None. 
  optional data_common.DataMeta meta = 1;
  // Owners of the data
  repeated string owners = 2;
  // Which task generates the fustion data
  required string source_task_id = 3;
  // Whether the output has been written by a task. 
  required bool is_complete = 4;
}

// Request for deleting a fusion data
message DeleteFusionDataRequest {
  // Data identifier
  required string data_id = 1;
  // Used for authentication
  required cred_proto.Credential creds = 99;
}

// Response for deleting a fusion data
message DeleteFusionDataResponse {
  required bool success = 1;
}

// @need_authentication # automatic authentication
service DataStoreService {
  rpc RegisterPrivateInput(RegisterPrivateInputRequest) returns (RegisterPrivateInputResponse);
  rpc RegisterPrivateOutput(RegisterPrivateOutputRequest) returns (RegisterPrivateOutputResponse);
  rpc ReadPrivateOutput(ReadPrivateOutputRequest) returns (ReadPrivateOutputResponse);
  rpc DeletePrivateData(DeletePrivateDataRequest) returns (DeletePrivateDataResponse);
}

// @need_authentication # automatic authentication
service FusionDataService {
  rpc ReadFusionData(ReadFusionDataRequest) returns (ReadFusionDataResponse);
  rpc DeleteFusionData(DeleteFusionDataRequest) returns (DeleteFusionDataResponse);
}
